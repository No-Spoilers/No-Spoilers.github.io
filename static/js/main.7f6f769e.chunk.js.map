{"version":3,"sources":["axios-instance.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","App","state","loading","token","userId","userInfo","inputName","inputEmail","inputPassword","logIn","_callee","credentials","_ref2","data","regenerator_default","a","wrap","_context","prev","next","email","_this","password","console","log","JSON","stringify","setState","post","sent","t0","concat","stop","this","signUp","_callee2","formData","signupResponse","_context2","userName","handleChange","field","event","target","value","react_default","createElement","htmlFor","type","placeholder","name","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f6f769e.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://no-spoilers-backend.herokuapp.com/'\n});\n\nexport default instance;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from './axios-instance';\n\nclass App extends Component {\n    state = {\n        loading: false,\n        token: null,\n        userId: null,\n        userInfo: null,\n        inputName: \"Test User\",\n        inputEmail: \"test@email.com\",\n        inputPassword: \"new test password\"\n    }\n\n    logIn = async () => {\n        try {\n            const credentials = {\n                email: this.state.inputEmail,\n                password: this.state.inputPassword\n            }\n            console.log('--> credentials :', JSON.stringify(credentials, null, 4));\n            this.setState({loading:true})\n            const {data} = await axios.post('/login', credentials)\n            console.log('--> loginRepsonse :', data);\n            this.setState({\n                token: data.token, \n                userId: data.userId, \n                userInfo: data,\n                loading: false\n            })\n        } catch (err) {\n            console.log(`Connection error: ${err}`)\n            console.log(err)\n            this.setState({loading:false})\n        }\n    }\n\n    signUp = async () => {\n        try {\n            const formData = {\n                userName: this.state.inputName,\n                email: this.state.inputEmail,\n                password: this.state.inputPassword\n            }\n            console.log('--> formData :', JSON.stringify(formData, null, 4));\n            this.setState({loading:true})\n            const signupResponse = await axios.post('/signup', formData)\n            console.log('--> signupResponse :', signupResponse.data);\n        } catch (err) {\n            console.log(`Signup error: ${err}`)\n            console.log(err)\n        }\n        this.setState({loading:false})\n    }\n\n    handleChange = (field) => (event) => {\n        const state = this.state\n        state[field] = event.target.value\n        this.setState(state)\n    }\n\n    render() {\n        if (!this.state.token || !this.state.userId) {\n            return (\n                <div>\n                    <form>\n                        <h3>Log In:</h3>\n                        <p>\n                            <label htmlFor=\"email\"><b>email</b></label>\n                            <input \n                                type=\"text\" \n                                placeholder=\"Enter Email\" \n                                name=\"email\" \n                                value={this.state.inputEmail}\n                                onChange={this.handleChange('inputEmail')}\n                            />\n                        </p>\n                        <p>\n                            Password: \n                            <input \n                                type=\"password\" \n                                placeholder=\"Enter Password\" \n                                name=\"password\"\n                                value={this.state.inputPassword}\n                                onChange={this.handleChange('inputPassword')}\n                            />\n                        </p>\n                        <p onClick={this.logIn}>Login</p>\n                    </form>\n                    <form>\n                        <h3>Sign Up:</h3>\n                        <p>\n                            <label htmlFor=\"userName\"><b>userName</b></label>\n                            <input \n                                type=\"text\" \n                                placeholder=\"Enter User Name\" \n                                name=\"userName\" \n                                value={this.state.inputName}\n                                onChange={this.handleChange('inputName')}\n                            />\n                        </p>\n                        <p>\n                            Email:\n                            <input \n                                type=\"text\" \n                                placeholder=\"Enter Email\" \n                                name=\"email\" \n                                value={this.state.inputEmail}\n                                onChange={this.handleChange('inputEmail')}\n                            />\n                        </p>\n                        <p>\n                            Password: \n                            <input \n                                type=\"password\" \n                                placeholder=\"Enter Password\" \n                                name=\"password\"\n                                value={this.state.inputPassword} \n                                onChange={this.handleChange('inputPassword')}\n                            />\n                        </p>\n                        <p onClick={this.signUp}>Sign Up</p>\n                    </form>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <p>\n                    Token: {this.state.token}\n                </p>\n                <p>\n                    User ID: {this.state.userId}\n                </p>\n                <p>\n                    User Info: \n                </p>\n                <pre>\n                    {JSON.stringify(this.state.userInfo, null, 2)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}